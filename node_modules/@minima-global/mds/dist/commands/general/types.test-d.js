import { describe, it, expectTypeOf } from 'vitest';
import { MDS, } from '../../index.js';
describe('MDS Commands Type Checking', () => {
    describe('Balance Command Type Checking', () => {
        it('should accept correct parameter types with params and optional callback', () => {
            expectTypeOf().toMatchTypeOf();
        });
        it('should accept correct parameter types with optional callback', () => {
            expectTypeOf().toMatchTypeOf();
        });
        it('tokendetails true should return BalanceWithTokenDetailsresponse', async () => {
            const actual = await MDS.cmd.balance({
                params: {
                    tokendetails: 'true',
                },
            });
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('Block Command Type Checking', () => {
        it('should accept correct parameter types with optional callback', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('CheckAddress Command Type Checking', () => {
        it('should require params object with address', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('CoinCheck Command Type Checking', () => {
        it('should require params object with data', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('CoinExport Command Type Checking', () => {
        it('should require params object with coinid', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('GetAddress Command Type Checking', () => {
        it('should accept optional callback', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('HashTest Command Type Checking', () => {
        it('should accept optional params and callback', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('History Command Type Checking', () => {
        it('should accept optional params and callback', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('NewAddress Command Type Checking', () => {
        it('should accept optional callback', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('PrintTree Command Type Checking', () => {
        it('should accept optional params and callback', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('Status Command Type Checking', () => {
        it('should accept optional params and callback', () => {
            expectTypeOf().toMatchTypeOf();
        });
        it('should accept optional callback as second parameter', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
    describe('Trace Command Type Checking', () => {
        it('should require params object with enable property', () => {
            expectTypeOf().toMatchTypeOf();
        });
    });
});
//# sourceMappingURL=types.test-d.js.map