import { z } from 'zod';

declare function configureDappConf(logs?: boolean): Promise<void>;

declare const installParams: z.ZodObject<{
    port: z.ZodDefault<z.ZodNumber>;
    pathToFile: z.ZodString;
    miniDappName: z.ZodString;
    miniDappVersion: z.ZodString;
}, "strip", z.ZodTypeAny, {
    port: number;
    pathToFile: string;
    miniDappName: string;
    miniDappVersion: string;
}, {
    pathToFile: string;
    miniDappName: string;
    miniDappVersion: string;
    port?: number | undefined;
}>;
type InstallParams = z.infer<typeof installParams>;
declare function install({ port, pathToFile, miniDappName, miniDappVersion, }: InstallParams): Promise<any>;

declare const uninstallParams: z.ZodObject<{
    port: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    port: number;
}, {
    port?: number | undefined;
}>;
type UninstallParams = z.infer<typeof uninstallParams>;
declare function uninstall({ port }: UninstallParams): Promise<void>;

declare const updateParams: z.ZodObject<{
    port: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    port: number;
}, {
    port?: number | undefined;
}>;
type UpdateParams = z.infer<typeof updateParams>;
declare function update({ port }: UpdateParams): Promise<void>;

declare function zip(file: string, build: string, logs?: boolean): Promise<unknown>;

declare function isReactProject(projectPath?: string): boolean;

export { configureDappConf, install, isReactProject, uninstall, update, zip };
