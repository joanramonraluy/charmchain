import{existsSync as l,readFileSync as P}from"fs";import{join as m}from"path";function d(i=process.cwd()){try{let e=m(i,"package.json");if(!l(e))return!1;let t=JSON.parse(P(e,"utf-8"));if(t.template==="react-ts")return!0;let r={...t.dependencies,...t.devDependencies};if(r.react||r["@types/react"])return!0;let o=m(i,"src");if(l(o)){let c=m(o,"App.tsx"),s=m(o,"App.jsx");if(l(c)||l(s))return!0}return!1}catch{return!1}}import{readFileSync as u,writeFileSync as S}from"fs";async function W(i=!1){let e=JSON.parse(u("./package.json","utf-8")),r=d()?"./build/dapp.conf":"./dapp.conf";u(r,"utf-8"),i&&console.log("dAppConfPath",r);let o=u(r,"utf-8");i&&console.log("dAppConf",o);let c=s=>s.charAt(0).toUpperCase()+s.slice(1);o=o.replace("{{name}}",c(e.name)),o=o.replace("{{version}}",e.version),o=o.replace("{{description}}",e.description||""),o=o.replace("{{category}}",e.category||"other"),S(r,o)}import{exec as x}from"child_process";import{promisify as $}from"util";import{z as p}from"zod";var w=$(x),A=p.object({port:p.number().default(9005),pathToFile:p.string(),miniDappName:p.string(),miniDappVersion:p.string()});async function G({port:i=9005,pathToFile:e,miniDappName:t,miniDappVersion:r}){let o=A.parse({port:i,pathToFile:e,miniDappName:t,miniDappVersion:r}),c=`http://localhost:${o.port}/${encodeURIComponent(`mds action:install file:${o.pathToFile}/${o.miniDappName}-${o.miniDappVersion}.mds.zip`)}`,{stdout:s,stderr:a}=await w(`curl -s "${c}"`);if(a)throw new Error(a);return JSON.parse(s)}import{exec as U}from"child_process";import{readFileSync as k}from"fs";import{promisify as I}from"util";import{z as y}from"zod";var g=I(U),v=y.object({port:y.number().default(9005)});async function X({port:i=9005}){let e=v.parse({port:i}),t=JSON.parse(k("./package.json","utf-8")),r=n=>n.charAt(0).toUpperCase()+n.slice(1),{stdout:o}=await g(`curl -s "http://localhost:${e.port}/mds"`),a=JSON.parse(o).response.minidapps.filter(n=>n.conf.name===r(t.name)).map(n=>n.uid);for(let n of a){let f=`http://localhost:${e.port}/${encodeURIComponent(`mds action:uninstall uid:${n}`)}`;await g(`curl -s "${f}"`)}}import{exec as J}from"child_process";import{readFileSync as b}from"fs";import{promisify as C}from"util";import{z as h}from"zod";var z=C(J),D=h.object({port:h.number().default(9005)});async function no({port:i=9005}){let e=D.parse({port:i}),t=JSON.parse(b("./package.json","utf-8")),r=n=>n.charAt(0).toUpperCase()+n.slice(1),{stdout:o}=await z(`curl -s "http://localhost:${e.port}/mds"`),a=JSON.parse(o).response.minidapps.filter(n=>n.conf.name===r(t.name)).map(n=>n.uid);for(let n of a){let f=`http://localhost:${e.port}/${encodeURIComponent(`mds action:update uid:${n}`)}`;await z(`curl -s "${f}"`)}}import F from"archiver";import j from"fs";async function io(i,e,t=!1){return t&&(console.log("Starting zip process..."),console.log("File:",i),console.log("Build directory:",e)),new Promise((r,o)=>{try{t&&console.log("Creating write stream...");let c=j.createWriteStream(i);c.on("error",a=>{console.error("Write stream error:",a),o(a)}),t&&console.log("Initializing archiver...");let s=F("zip",{zlib:{level:9}});s.on("warning",a=>{t&&console.warn("Archive warning:",a)}),s.on("error",a=>{t&&console.error("Archive error:",a),o(a)}),t&&console.log("Setting up file patterns to archive..."),s.glob("**/*",{cwd:e,ignore:["**/node_modules/**","**/package-lock.json","**/yarn.lock","**/pnpm-lock.yaml","**/package.json"]}),t&&console.log("Piping archive to output stream..."),s.pipe(c),t&&console.log("Finalizing archive..."),s.finalize(),c.on("close",()=>{let a=s.pointer();t&&console.log(`Archive creation completed successfully. Total bytes: ${a}`),r(!0)})}catch(c){t&&console.error("Unexpected error during zip process:",c),o(c)}})}export{d as a,W as b,G as c,X as d,no as e,io as f};
//# sourceMappingURL=chunk-72HLBJSM.js.map