{"version":3,"sources":["../src/utils/is-react-project.ts","../src/scripts/dapp-conf.ts","../src/scripts/install.ts","../src/scripts/uninstall.ts","../src/scripts/update.ts","../src/scripts/zip.ts"],"sourcesContent":["import { existsSync, readFileSync } from \"fs\"\nimport { join } from \"path\"\n\nexport function isReactProject(projectPath: string = process.cwd()): boolean {\n  try {\n    // Check package.json\n    const packageJsonPath = join(projectPath, \"package.json\")\n    if (!existsSync(packageJsonPath)) {\n      return false\n    }\n\n    const packageJson = JSON.parse(readFileSync(packageJsonPath, \"utf-8\"))\n\n    // Check if template is react-ts\n    if (packageJson.template === \"react-ts\") {\n      return true\n    }\n\n    // Check dependencies and devDependencies for React\n    const dependencies = {\n      ...packageJson.dependencies,\n      ...packageJson.devDependencies,\n    }\n    if (dependencies.react || dependencies[\"@types/react\"]) {\n      return true\n    }\n\n    // Check for common React file extensions\n    const srcPath = join(projectPath, \"src\")\n    if (existsSync(srcPath)) {\n      const appFile = join(srcPath, \"App.tsx\")\n      const appJsxFile = join(srcPath, \"App.jsx\")\n      if (existsSync(appFile) || existsSync(appJsxFile)) {\n        return true\n      }\n    }\n\n    return false\n  } catch (error) {\n    return false\n  }\n}\n","import { readFileSync, writeFileSync } from \"fs\"\nimport { isReactProject } from \"../utils/is-react-project.js\"\n\nexport async function configureDappConf(logs: boolean = false) {\n  const packageJson = JSON.parse(readFileSync(\"./package.json\", \"utf-8\"))\n\n  // Try both build folder and root directory\n\n  const isReact = isReactProject()\n\n  let dAppConfPath = isReact ? \"./build/dapp.conf\" : \"./dapp.conf\"\n\n  readFileSync(dAppConfPath, \"utf-8\")\n\n  if (logs) {\n    console.log(\"dAppConfPath\", dAppConfPath)\n  }\n\n  let dAppConf = readFileSync(dAppConfPath, \"utf-8\")\n\n  if (logs) {\n    console.log(\"dAppConf\", dAppConf)\n  }\n\n  const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1)\n\n  dAppConf = dAppConf.replace(\"{{name}}\", capitalize(packageJson.name))\n  dAppConf = dAppConf.replace(\"{{version}}\", packageJson.version)\n  dAppConf = dAppConf.replace(\"{{description}}\", packageJson.description || \"\")\n  dAppConf = dAppConf.replace(\"{{category}}\", packageJson.category || \"other\")\n\n  writeFileSync(dAppConfPath, dAppConf)\n}\n","import { exec } from \"child_process\"\nimport { promisify } from \"util\"\nimport { z } from \"zod\"\n\nconst execAsync = promisify(exec)\n\nconst installParams = z.object({\n  port: z.number().default(9005),\n  pathToFile: z.string(),\n  miniDappName: z.string(),\n  miniDappVersion: z.string(),\n})\n\ntype InstallParams = z.infer<typeof installParams>\n\nexport async function install({\n  port = 9005,\n  pathToFile,\n  miniDappName,\n  miniDappVersion,\n}: InstallParams) {\n  const params = installParams.parse({\n    port,\n    pathToFile,\n    miniDappName,\n    miniDappVersion,\n  })\n\n  const url = `http://localhost:${params.port}/${encodeURIComponent(\n    `mds action:install file:${params.pathToFile}/${params.miniDappName}-${params.miniDappVersion}.mds.zip`\n  )}`\n\n  const { stdout, stderr } = await execAsync(`curl -s \"${url}\"`)\n\n  if (stderr) {\n    throw new Error(stderr)\n  }\n\n  return JSON.parse(stdout)\n}\n","import { exec } from \"child_process\"\nimport { readFileSync } from \"fs\"\nimport { promisify } from \"util\"\nimport { z } from \"zod\"\n\nconst execAsync = promisify(exec)\n\nconst uninstallParams = z.object({\n  port: z.number().default(9005),\n})\n\ntype UninstallParams = z.infer<typeof uninstallParams>\n\nexport async function uninstall({ port = 9005 }: UninstallParams) {\n  // Validate the port\n  const params = uninstallParams.parse({\n    port,\n  })\n\n  // Get the package name from the package.json file\n  const packageJson = JSON.parse(readFileSync(\"./package.json\", \"utf-8\"))\n  const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1)\n\n  // Get list of installed minidapps\n  const { stdout: mdsResponse } = await execAsync(\n    `curl -s \"http://localhost:${params.port}/mds\"`\n  )\n  const mdsData = JSON.parse(mdsResponse)\n\n  const foundInstallations = mdsData.response.minidapps.filter(\n    (i: any) => i.conf.name === capitalize(packageJson.name)\n  )\n  const foundInstallationUIDS = foundInstallations.map((i: any) => i.uid)\n\n  // Uninstall the minidapps\n  for (const uid of foundInstallationUIDS) {\n    const uninstallUrl = `http://localhost:${params.port}/${encodeURIComponent(\n      `mds action:uninstall uid:${uid}`\n    )}`\n\n    await execAsync(`curl -s \"${uninstallUrl}\"`)\n  }\n}\n","import { exec } from \"child_process\"\nimport { readFileSync } from \"fs\"\nimport { promisify } from \"util\"\nimport { z } from \"zod\"\n\nconst execAsync = promisify(exec)\n\nconst updateParams = z.object({\n  port: z.number().default(9005),\n})\n\ntype UpdateParams = z.infer<typeof updateParams>\n\nexport async function update({ port = 9005 }: UpdateParams) {\n  const params = updateParams.parse({\n    port,\n  })\n\n  const packageJson = JSON.parse(readFileSync(\"./package.json\", \"utf-8\"))\n  const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1)\n\n  // Get list of installed minidapps\n  const { stdout: mdsResponse } = await execAsync(\n    `curl -s \"http://localhost:${params.port}/mds\"`\n  )\n\n  const mdsData = JSON.parse(mdsResponse)\n\n  const foundInstallations = mdsData.response.minidapps.filter(\n    (i: any) => i.conf.name === capitalize(packageJson.name)\n  )\n  const foundInstallationUIDS = foundInstallations.map((i: any) => i.uid)\n\n  for (const uid of foundInstallationUIDS) {\n    const updateUrl = `http://localhost:${params.port}/${encodeURIComponent(\n      `mds action:update uid:${uid}`\n    )}`\n\n    await execAsync(`curl -s \"${updateUrl}\"`)\n  }\n}\n","import archiver from \"archiver\"\nimport fs from \"fs\"\n\nexport async function zip(file: string, build: string, logs: boolean = false) {\n  if (logs) {\n    console.log(\"Starting zip process...\")\n    console.log(\"File:\", file)\n    console.log(\"Build directory:\", build)\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      if (logs) {\n        console.log(\"Creating write stream...\")\n      }\n      const output = fs.createWriteStream(file)\n\n      output.on(\"error\", (err) => {\n        console.error(\"Write stream error:\", err)\n        reject(err)\n      })\n\n      if (logs) {\n        console.log(\"Initializing archiver...\")\n      }\n      const archive = archiver(\"zip\", {\n        zlib: { level: 9 },\n      })\n\n      archive.on(\"warning\", (err) => {\n        if (logs) {\n          console.warn(\"Archive warning:\", err)\n        }\n      })\n\n      archive.on(\"error\", (err) => {\n        if (logs) {\n          console.error(\"Archive error:\", err)\n        }\n        reject(err)\n      })\n\n      if (logs) {\n        console.log(\"Setting up file patterns to archive...\")\n      }\n\n      archive.glob(\"**/*\", {\n        cwd: build,\n        ignore: [\n          \"**/node_modules/**\",\n          \"**/package-lock.json\",\n          \"**/yarn.lock\",\n          \"**/pnpm-lock.yaml\",\n          \"**/package.json\",\n        ],\n      })\n\n      if (logs) {\n        console.log(\"Piping archive to output stream...\")\n      }\n      archive.pipe(output)\n\n      if (logs) {\n        console.log(\"Finalizing archive...\")\n      }\n      archive.finalize()\n\n      output.on(\"close\", () => {\n        const finalSize = archive.pointer()\n        if (logs) {\n          console.log(\n            `Archive creation completed successfully. Total bytes: ${finalSize}`\n          )\n        }\n        resolve(true)\n      })\n    } catch (error) {\n      if (logs) {\n        console.error(\"Unexpected error during zip process:\", error)\n      }\n      reject(error)\n    }\n  })\n}\n"],"mappings":"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","names":["existsSync","readFileSync","join","isReactProject","projectPath","packageJsonPath","packageJson","dependencies","srcPath","appFile","appJsxFile","readFileSync","writeFileSync","configureDappConf","logs","packageJson","readFileSync","dAppConfPath","isReactProject","dAppConf","capitalize","str","writeFileSync","exec","promisify","z","execAsync","installParams","install","port","pathToFile","miniDappName","miniDappVersion","params","url","stdout","stderr","exec","readFileSync","promisify","z","execAsync","uninstallParams","uninstall","port","params","packageJson","capitalize","str","mdsResponse","foundInstallationUIDS","i","uid","uninstallUrl","exec","readFileSync","promisify","z","execAsync","updateParams","update","port","params","packageJson","capitalize","str","mdsResponse","foundInstallationUIDS","i","uid","updateUrl","archiver","fs","zip","file","build","logs","resolve","reject","output","err","archive","finalSize","error"]}