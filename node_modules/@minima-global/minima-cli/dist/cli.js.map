{"version":3,"sources":["../src/cli.ts","../src/utils/logger.ts","../src/utils/read-env.ts"],"sourcesContent":["#!/usr/bin/env node\nimport chalk from \"chalk\"\nimport { Command } from \"commander\"\nimport { readFileSync } from \"fs\"\nimport ora, { type Ora } from \"ora\"\nimport { configureDappConf } from \"./scripts/dapp-conf.js\"\nimport { install } from \"./scripts/install.js\"\nimport { uninstall } from \"./scripts/uninstall.js\"\nimport { update } from \"./scripts/update.js\"\nimport { zip } from \"./scripts/zip.js\"\nimport { isReactProject } from \"./utils/is-react-project.js\"\nimport { logger } from \"./utils/logger.js\"\nimport { readEnvVars } from \"./utils/read-env.js\"\n\nconst program = new Command()\nconst version = JSON.parse(readFileSync(\"./package.json\", \"utf-8\")).version\n\nprogram\n  .name(\"minima\")\n  .description(\"CLI to manage Minima MiniDapps\")\n  .version(version)\n\nprogram\n  .command(\"zip\")\n  .description(\"Build and zip the MiniDapp\")\n  .option(\"-l, --logs\", \"Debug logs\", false)\n  .action(async (options) => {\n    const spinner = ora(\"Building MiniDapp...\").start()\n    try {\n      const packageJson = JSON.parse(readFileSync(\"./package.json\", \"utf-8\"))\n\n      await configureDappConf(options.logs)\n\n      spinner.text = \"Zipping MiniDapp...\"\n      const zipFileName = `${packageJson.name}-${packageJson.version}.mds.zip`\n      const filePath = isReactProject() ? \"build/\" : \"./\"\n\n      if (options.logs) {\n        console.log(\"filePath\", filePath)\n        console.log(\"zipFileName\", zipFileName)\n      }\n\n      await zip(zipFileName, filePath, options.logs)\n\n      setTimeout(() => {\n        spinner.succeed(\n          chalk.green(`MiniDapp built and zipped successfully! ${zipFileName}`)\n        )\n      }, 5000)\n    } catch (error) {\n      if (options.logs) {\n        console.log(\"error\", error)\n      }\n\n      spinner.fail(chalk.red(\"Failed to build and zip MiniDapp\"))\n      process.exit(1)\n    }\n  })\n\nprogram\n  .command(\"install\")\n  .description(\"Install the MiniDapp\")\n  .option(\"-p, --port <port>\", \"rpcport number\")\n  .action(async (options) => {\n    let installSpinner: Ora | undefined\n    try {\n      const packageJson = JSON.parse(readFileSync(\"./package.json\", \"utf-8\"))\n\n      installSpinner = ora(\"Installing MiniDapp...\").start()\n\n      await configureDappConf()\n\n      const env = readEnvVars()\n\n      if (!options.port) {\n        if (env.mdsPort) {\n          options.port = env.mdsPort + 2\n        } else {\n          options.port = \"9005\"\n        }\n      }\n\n      const zipFileName = `${packageJson.name}-${packageJson.version}.mds.zip`\n\n      const filePath = packageJson.template === \"react-ts\" ? \"build/\" : \"./\"\n\n      await zip(zipFileName, filePath)\n\n      await install({\n        port: parseInt(options.port),\n        pathToFile: process.cwd(),\n        miniDappName: packageJson.name,\n        miniDappVersion: packageJson.version,\n      })\n\n      setTimeout(() => {\n        installSpinner?.succeed(\"MiniDapp installed successfully!\")\n      }, 2000)\n    } catch (error) {\n      installSpinner?.fail(\"Failed to install MiniDapp\")\n      if (error instanceof Error) {\n        logger.info(\n          \"Please check that you have RPC enabled on your Minima node and that the port is correct\"\n        )\n        logger.info(\n          \"If you are using a custom port other than 9005, please use the -p option to specify the port\"\n        )\n      } else {\n        logger.error(String(error))\n      }\n      process.exit(1)\n    }\n  })\n\nprogram\n  .command(\"uninstall\")\n  .option(\"-p, --port <port>\", \"port number\")\n  .description(\"Uninstall the MiniDapp\")\n  .action(async (options) => {\n    let uninstallSpinner: Ora | undefined\n    try {\n      const env = readEnvVars()\n\n      if (!options.port) {\n        if (env.mdsPort) {\n          options.port = env.mdsPort + 2\n        } else {\n          options.port = \"9005\"\n        }\n      }\n\n      uninstallSpinner = ora(\"Uninstalling MiniDapp...\").start()\n      await uninstall({\n        port: parseInt(options.port),\n      })\n      setTimeout(() => {\n        uninstallSpinner?.succeed(\"MiniDapp uninstalled successfully!\")\n      }, 2000)\n    } catch (error) {\n      uninstallSpinner?.fail(\"Failed to uninstall MiniDapp\")\n      if (error instanceof Error) {\n        logger.error(error.message)\n        logger.info(`Port: ${options.port}`)\n        logger.info(\n          \"Please check that you have RPC enabled on your Minima node and that the port is correct\"\n        )\n        logger.info(\n          \"If you are using a custom port other than 9005, please use the -p option to specify the port\"\n        )\n      } else {\n        logger.error(String(error))\n      }\n      process.exit(1)\n    }\n  })\n\nprogram\n  .command(\"update\")\n  .description(\"Update the MiniDapp\")\n  .option(\"-p, --port <port>\", \"rpcport number\")\n  .action(async (options) => {\n    let updateSpinner: Ora | undefined\n    try {\n      const packageJson = JSON.parse(readFileSync(\"./package.json\", \"utf-8\"))\n      updateSpinner = ora(\"Updating MiniDapp...\").start()\n\n      // Configure the MiniDapp Dapp.conf\n      await configureDappConf()\n\n      // Get the zip file name\n      const zipFileName = `${packageJson.name}-${packageJson.version}.mds.zip`\n      const filePath = packageJson.template === \"react-ts\" ? \"build/\" : \"./\"\n\n      // Zip the MiniDapp\n      await zip(zipFileName, filePath)\n\n      const env = readEnvVars()\n\n      if (!options.port) {\n        if (env.mdsPort) {\n          options.port = env.mdsPort + 2\n        } else {\n          options.port = \"9005\"\n        }\n      }\n\n      // Update the MiniDapp\n      await update({\n        port: parseInt(options.port),\n      })\n      setTimeout(() => {\n        updateSpinner?.succeed(\"MiniDapp updated successfully!\")\n      }, 2000)\n    } catch (error) {\n      updateSpinner?.fail(\"Failed to update MiniDapp\")\n      if (error instanceof Error) {\n        logger.error(error.message)\n        logger.info(`Port: ${options.port}`)\n        logger.info(\n          \"Please check that you have RPC enabled on your Minima node and that the port is correct\"\n        )\n        logger.info(\n          \"If you are using a custom port other than 9005, please use the -p option to specify the port\"\n        )\n      } else {\n        logger.error(String(error))\n      }\n      process.exit(1)\n    }\n  })\n\nprogram.parse()\n","import chalk from \"chalk\"\n\nexport const logger = {\n  info: (message: string) => {\n    console.log(chalk.blue(message))\n  },\n  error: (message: string) => {\n    console.error(chalk.red(message))\n  },\n  success: (message: string) => {\n    console.log(chalk.green(message))\n  },\n  break: () => {\n    console.log(\"\")\n  },\n}\n","import { existsSync, readFileSync } from \"fs\"\nimport { resolve } from \"path\"\nimport { logger } from \"./logger.js\"\n\ninterface DebugEnvVars {\n  debug: boolean\n  host: string\n  mdsPort: number\n  sessionId: string\n}\n\n/**\n * Reads environment variables from the .env file in the project root\n * @returns Object containing the environment variables\n */\nexport function readEnvVars(): DebugEnvVars {\n  try {\n    // Default values\n    const defaultEnvVars: DebugEnvVars = {\n      debug: false,\n      host: \"127.0.0.1\",\n      mdsPort: 9003,\n      sessionId: \"\",\n    }\n\n    // Find the .env file\n    const envPath = resolve(process.cwd(), \".env\")\n\n    if (!existsSync(envPath)) {\n      logger.error(\"No .env file found, using default values\")\n      return defaultEnvVars\n    }\n\n    // Read the .env file\n    const envContent = readFileSync(envPath, \"utf-8\")\n    const envLines = envContent.split(\"\\n\")\n\n    // Parse the environment variables\n    const envVars: Record<string, string> = {}\n\n    for (const line of envLines) {\n      const trimmedLine = line.trim()\n      if (!trimmedLine || trimmedLine.startsWith(\"#\")) continue\n\n      const [key, ...valueParts] = trimmedLine.split(\"=\")\n      if (key && valueParts.length > 0) {\n        envVars[key] = valueParts.join(\"=\")\n      }\n    }\n\n    // Extract the relevant environment variables\n    return {\n      debug: envVars.VITE_DEBUG === \"true\",\n      host: envVars.VITE_DEBUG_HOST || defaultEnvVars.host,\n      mdsPort: parseInt(\n        envVars.VITE_DEBUG_MDS_PORT || String(defaultEnvVars.mdsPort),\n        10\n      ),\n      sessionId: envVars.VITE_DEBUG_SESSION_ID || defaultEnvVars.sessionId,\n    }\n  } catch (error) {\n    logger.error(`Error reading environment variables: ${error}`)\n    return {\n      debug: false,\n      host: \"127.0.0.1\",\n      mdsPort: 9003,\n      sessionId: \"\",\n    }\n  }\n}\n"],"mappings":"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","names":["chalk","Command","readFileSync","ora","chalk","logger","message","existsSync","readFileSync","resolve","readEnvVars","defaultEnvVars","envPath","resolve","existsSync","logger","envLines","readFileSync","envVars","line","trimmedLine","key","valueParts","error","program","Command","version","readFileSync","options","spinner","ora","packageJson","configureDappConf","zipFileName","filePath","isReactProject","zip","chalk","error","installSpinner","env","readEnvVars","install","logger","uninstallSpinner","uninstall","updateSpinner","update"]}